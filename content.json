{"pages":[{"title":"","text":"Intro.Hey there, I’m Dohun, Growth Marketer turned Software Developer.Currently living in Singapore 🇸🇬. Github LinkedIn Email Projects ToDo List Simple todo-list built with 2 different frameworks - Node.js vs React Merlabot Merlabot is a Singapore Travel bot for Korean tourists. Automating Instagram Likes Programme that likes top 3 recent post of hashtags provided img.is-rounded { border-radius: 50%; } .buttons { width: 100%; display: flex; } .buttons a.button { flex-grow: 1; } a.button.is-linkedin { background-color: #0077B5; border-color: #0077B5; color: #FFF; } @media screen and (max-width: 720px) { .buttons a.button { width: 100%; margin-right: 0; } } .project-links { margin-bottom: 16px; } /* DEMO-SPECIFIC STYLES */ .wrapper { display: flex; justify-content: center; } .typewriter h1 span{ color: #000000; font-size: 33px; font-family: inherit; overflow: hidden; /* Ensures the content is not revealed until the animation */ border-right: .15em solid orange; /* The typwriter cursor */ white-space: nowrap; /* Keeps the content on a single line */ margin: 0 auto; /* Gives that scrolling effect as the typing happens */ letter-spacing: 0em; /* Adjust as needed */ animation: typing 2s steps(30, end), blink-caret .5s step-end; } /* The typing effect */ @keyframes typing { from { width: 0 } to { width: 100% } } /* The typewriter cursor effect */ @keyframes blink-caret { from, to { border-color: transparent } 50% { border-color: orange } } var TxtType = function(el, toRotate, period) { this.toRotate = toRotate; this.el = el; this.loopNum = 0; this.period = parseInt(period, 10) || 2000; this.txt = ''; this.tick(); this.isDeleting = false; }; TxtType.prototype.tick = function() { var i = this.loopNum % this.toRotate.length; var fullTxt = this.toRotate[i]; if (this.isDeleting) { this.txt = fullTxt.substring(0, this.txt.length - 1); } else { this.txt = fullTxt.substring(0, this.txt.length + 1); } this.el.innerHTML = ''+this.txt+''; var that = this; var delta = 200 - Math.random() * 100; if (this.isDeleting) { delta /= 2; } if (!this.isDeleting && this.txt === fullTxt) { delta = this.period; this.isDeleting = true; } else if (this.isDeleting && this.txt === '') { this.isDeleting = false; this.loopNum++; delta = 500; } setTimeout(function() { that.tick(); }, delta); }; window.onload = function() { var elements = document.getElementsByClassName('typewrite'); for (var i=0; i","link":"/about/index.html"}],"posts":[{"title":"TIL-191002","text":"Today I Learned Attempted Fizz Buzz on Leetcode. It was a fairly easy and straight-forward array problem. Solved through forloop. Attempted Deleting A Node In a Singly Linked List on Leetcode. Seems like I’m still not completely sound with the linked list concept. Referred to guide and discussion for solution. Read up on Prototype concept : Reference Summary Prototype object of the constructor function is shared among all the objects created using the constructor function. Problem with the constructor function: Every object has its own instance of the function Problem with the prototype: Modifying a property using one object reflects the other object also Learned new DOM functions insertRow, insertCell","link":"/2019/10/02/TIL-191002/"},{"title":"TIL-191003","text":"Today I Learned Finished Creating ToDo using Axios &amp; DOM JavaScript Why Use Axios &amp; DOM JavaScript? Using NodeJS &amp; ejs required continuous redirecting and refreshing web pages to update data. It is therefore considered relatively slower. By using DOM JavaScript and Axios, it makes use of Axios to call RESTful API from Node server to update data frontend on DOM without a need to refresh web pages. DOM JS function calls can be called to call updated data. How Does It Work? Call fetchTask to GET ToDo tasks and call appendDOM. Every time appendDOM is called, it resets the table &amp; add rows using data called from fetchTask by calling createTable. createTable adds checkbox in the 1st cell, task title in the 2nd cell and delete button in the 3rd cell. Checkbox onclick calls updateTask function that in turn PUT ToDo tasks by calling RESTful API and updating is_done as true or false respectively Delete button calls deleteTask function that DELETE ToDo tasks. To add new tasks, form is submitted and the data is passed over to createTask function. Note: form to be reset after submission createTask POST new tasks into the RESTful API.Note: Everytime there is an update in the state of the tasks data, fetchTaskis called to keep the tasks data updated","link":"/2019/10/03/TIL-191003/"},{"title":"TIL-191004","text":"Today I Learned Attempted Valid Anagram on Leetcode. First attempt was Brute Force solution using Array object methods - push &amp; splice. Improved attempt made use of key value pair object. When passing data to RESTful API using Axios, there is a difference ways of sending the data.In below case, id is being passed over as path parameter. 1234axios .post(`/api/tasks/${id}`) .then() .catch(err) While in this case, is_done is being passed over as request body parameter in JSON format. 123456axios .post(`/apid/tasks/${id}`, { is_done: is_done }) .then() .catch(err) More on REST API parameters best practices","link":"/2019/10/04/TIL-191004/"},{"title":"TIL-191007","text":"Today I Learned First exposure to React 2 libraries needed - React &amp; ReactDOM Babel turns JSX into HTML JSX vs HTML Syntax: camelCase vs lower case; className vs class Styling: JSX uses { } Referencing JS variablesNote: Refer to browser console for more differences import [ES2015] vs require [CommonJS] Leetcode - Convert Sorted Array to BST Solving tree problem using recursive method","link":"/2019/10/08/TIL-191007/"},{"title":"Binary Tree Traversal","text":"Binary Tree Traversal Depth-First SearchPre-order Traversal Pre-order traversal is to visit the root first.Then traverse the left subtree.Finally, traverse the right subtree. [ A → B → D → E → C → F → G ] Javascript Solution 12345678910111213141516171819var preorderTraversal = function(root) { //corner case if (root == null) return [] //declarations let result = [] let stack = [root] while (stack.length) { //initially, stack.length is 1 let pointer = stack.pop() //node pointer result.push(pointer.val) //insert pointed node at the end of result if (pointer.right) { stack.push(pointer.right) //stack right subtree first } if (pointer.left) { stack.push(pointer.left) //stack left subtree on top of right subtree } //iterate until stack is empty } return result} In-order Traversal In-order traversal is to traverse the left subtree first.Then visit the root.Finally, traverse the right subtree. [D → B → E → A → F → C → G] Javascript Solution 123456789101112131415161718192021var inorderTraversal = function(root) { //corner case if (root == null) return [] //declaration let result = [] let stack = [] let pointer = root while (stack.length || pointer) { if (pointer) { //if pointed node is not null stack.push(pointer) //store pointed node at the top of stack pointer = pointer.left //shift pointer to left node } else { //if pointed node is null (reached the leaf) pointer = stack.pop() //assign extracted top stack value to pointer result.push(pointer.val) //insert pointed node at the end of result pointer = pointer.right //shift pointer to right node } } return result} Post-order Traversal Post-order traversal is to traverse the left subtree first.Then traverse the right subtree.Finally, visit the root. [D → E → B → F → G → C → A] Javascript Solution 123456789101112131415161718var postorderTraversal = function(root) { //corner case if (root == null) return [] //declarations let result = [] let stack = [root] while (stack.length) { let pointer = stack.pop() //node pointer result.unshift(pointer.val) //insert pointed node at the front of result if (pointer.left) { stack.push(pointer.left) //stack left subtree first } if (pointer.right) { stack.push(pointer.right) //stack right subtree on top of left subtree } } return result} Breadth-First SearchLevel-order traversal is to traverse the tree level by level. Breadth-First Search is an algorithm to traverse or search in data structures like a tree or a graph. The algorithm starts with a root node and visit the node itself first. Then traverse its neighbors, traverse its second level neighbors, traverse its third level neighbors, so on and so forth. ie. Given Binary Tree 12345 3 / \\9 20 / \\ 15 7 returns 12345[ [3], [9,20], [15,7]] Javascript Solution 12345678910111213141516171819202122var levelOrder = function(root) { if (root == null) return [] let result = [] let queue = [root] while (queue.length) { let size = queue.length let temp = [] for (i = 0; i &lt; size; i++) { // iterate through # of child nodes let node = queue.shift() // queue uses shift vs stack uses pop (see Note) temp.push(node.val) if (node.left) { queue.push(node.left) // queue left subtree first } if (node.right) { queue.push(node.right) // queue right subtree after left subtree } } result.push(temp) } return result} After queue (before) temp queue (after) result 1st Iteration [3 → •••] [ 3 ] [9 → •••, 20 → •••] [ [3] ] 2nd Iteration (inner loop) [9 → •••, 20 → •••] [ 9 ] [20 → •••] [ [3], [9] ] 2nd Iteration (inner loop) [20 → •••] [ 9, 20 ] [15 → •••, 7 → •••] [ [3], [9,20] ] 3rd Iteration (inner loop) [15 → •••, 7 → •••] [ 15 ] [7 → •••] [ [3], [9,20], [15] ] 3rd Iteration (inner loop) [7 → •••] [ 7 ] [ ] [ [3], [9,20], [15,7] ] Note: Stack: LIFO (Last In First Out) ie. Stack of Plates Queue: FIFO (First In First Out) ie. Queue in the movie References: Question Source - Leetcode Data Structures: Stacks &amp; Queues Data Structure &amp; Algorightms - Tree Traversal","link":"/2019/10/10/binary-tree-series/"},{"title":"TIL-191008","text":"Today I Learned React Component Nesting Component Hierarchy Component Reusability Component Configuration - Props (parent to child) Component Types Functional Components : Good for simple content Class Components: Good for just about everything else Easier code organization Can use ‘state’ (another React system) Understands lifecycle events","link":"/2019/10/09/TIL-191008/"},{"title":"TIL-191009","text":"Today I Learned Data Structure : Tree Traversing tree structure in Depth-First Search (DFS) &amp; Breadth-First Search (BFS) method. DFS consists of 3 traversal method Pre-order traversal : Root → Left → Right Post-order traversal : Left → Right → Root Inorder traversal : Left → Root → Right DFS makes use of stack for iterative approach while BFS uses queue. Stack is LIFO vs Queue is FIFO. More about Tree","link":"/2019/10/10/TIL-191009/"},{"title":"TIL-191011","text":"Today I Learned DS &amp; Algo Excel Sheet Column Number str.charCodeAt(i) converts alphabet to integer at specific sequence. Math.pow(n,m) =&gt; $n^m$ Grading Student Math.ceil(x/5)*5 rounds up number to the nearest 5 Math.floor rounds down number","link":"/2019/10/12/TIL-191011/"},{"title":"TIL-191010","text":"Today I Learned React Concept State is initialized at constructor setState updates the State and re-renders Project - Calculator Pilot","link":"/2019/10/11/TIL-191010/"},{"title":"TIL-191014","text":"Today I Learned React Conventional File Structure 12345- index- components - App.js - ThisComponent.js - ThatComponent.js Event Handler (JSX) OnChange OnClick OnSubmitNote: naming convention - On_Form/Input_Change(Click/Submit) Uncontrolled vs Controlled Element Controlled Element is preferred as it stores data inside React Components instead of HTML this calls from ____.____ Axios vs Fetch Axios is 3rd party library while fetch is in-built Fetch is light while Axios is more complex Axios has more functionality and thus, preferred.","link":"/2019/10/15/TIL-191014/"},{"title":"TIL-191018","text":"Today I Learned DS &amp; Algo Backtracking Recursion problemSo basically in backtracking we attempt solving a subproblem, and if we don’t reach the desired solution, then undo whatever we did for solving that subproblem, and try solving another subproblem.","link":"/2019/10/21/TIL-191018/"},{"title":"TIL-191016","text":"Today I Learned JavaScript New Syntax object delete: can delete a key value pair extends: class x (child) extends y (parent) React &amp; Node Sending API request from port 4000 (Client) to port 3000 (Server) Since they are running on different ports, they are different JavaScript origin. It doesn’t matter that they are on the same machine/hostname. CORS (Cross Origin Resource Sharing) Same-Origin Policy : a critical security mechanism that restricts how a document or script loaded from one origin can interact with a resource from another origin CORS introduces a standard mechanism that can be used by all browsers for implementing cross-domain requests.The spec defines a set of headers that allow the browser and server to communicate about which requests are (and are not) allowed.12345678app.use(function(req, res, next) { res.header(\"Access-Control-Allow-Origin\", \"YOUR-DOMAIN.TLD\"); // update to match the domain you will make the request from res.header( \"Access-Control-Allow-Headers\", \"Origin, X-Requested-With, Content-Type, Accept\" ); next();});","link":"/2019/10/17/TIL-191016/"},{"title":"TIL-191017","text":"Today I Learned React Pass function to onClick props instead of calling it. Otherwise, It will be called upon rendering without click. (Stack Overflow question) Notice how with onClick={() =&gt; alert('click')}, we’re passing a function as the onClick prop. React will only call this function after a click.Forgetting () =&gt; and writing onClick={alert('click')} is a common mistake, and would fire the alert every time the component re-renders","link":"/2019/10/21/TIL-191017/"},{"title":"TIL-191015","text":"Today I Learned DS &amp; Algo Hash Table provides high performance for insertion and searching of element. Only inbuilt function in C++, Java, Python. Hash Table consist of Hash Map and Hash Set. Hash Set contains no identical value and Hash Map has key value pair that counts the frequency of the key as value. In Javascript, Set in ES6 provides similar functionality to hash set. React After rendering HTML elements in DOM, if need to access the data from HTML elements, use React Refs. How to use? Create in constructor fxn &amp; pass to JSX as props","link":"/2019/10/16/TIL-191015/"},{"title":"TIL-191021","text":"Today I LearnedSummary DS &amp; Algo : Missing Number React : Redux - Insurance company analogy DS &amp; Algo Completed Missing Number which seemed like Array question but the question hinted that it could be done in linear runtime and constant space complexity - bit manipulation. Array solution involved array sort which slows down the efficiency and matching the number to the supposed number. Next best solution is summing up all integers in solution array and subtracting by integers in given array. Remainder is the integer missing - gaussian xxx Bit manipulation makes use of XOR which gives true output only if the input is odd. e.g. 1 ^ 0 = 1 , 0 ^ 1 = 1 But still confused about if the input is not binary, what would output be? solution suggests nums.length ^ nums[i] ^ i React Redux using analogy of insurance company. Redux consist of Action Creator Action dispatch Reducers State In the analogy, Person drops of a form (Action) stating policy or claim and front desk of insurance company, form receiver (dispatch) hand over the form to insurance departments consisting of accounting, policies and claim history (Reducers). Finally all processed policy or claim comes in form of compiled department data (State)","link":"/2019/10/23/TIL-191021/"},{"title":"TIL-191024","text":"Today I LearnedSummary DS &amp; Algo : Array React : Redux API call optimization DS &amp; Algo Attempted Happy Number (Easy) and solved without help in 40 mins. React ownProps as 2nd arg in mapStateToProps memoization when using redux-thunk to reduce overfetching","link":"/2019/10/26/TIL-191024/"},{"title":"TIL-191023","text":"Today I LearnedSummary Javascript : Array iterator type DS &amp; Algo : Array React : Redux - Reducer JavaScript .map() returns a new Array of objects created by taking some action on the original item. .every() returns a boolean - true if every element in this array satisfies the provided testing function. An important difference with .every() is that the test function may not always be called for every element in the array. Once the testing function returns false for any element, no more array elements are iterated. Therefore, the testing function should usually have no side effects. .forEach() returns nothing - It iterates the Array performing a given action for each item in the Array. (https://stackoverflow.com/questions/7340893/what-is-the-difference-between-map-every-and-foreach) DS &amp; Algo Pascal Triangle - Question involving 2 for-loops but I tried to solve through recursive approach first. Took more than necessary without getting it right. Correct approach should be to try brute force method and then try to optimise code. React Redux - Rule of Reducer Must return any value except undefined (1st time called) 2nd time onwards, it takes in previous state and action as argument Reducers are pure (no API calls etc) Must not mutate input state To manipulate input state, new array or object have to be create. eg. [...arr, newElem] instead of arr.push(newElem) Composing Reducer - use switch instead of ifelse Project Use cross-env library to execute bash commands like NODE_ENV=XXXX in Windows env","link":"/2019/10/25/TIL-191023/"},{"title":"TIL-191028","text":"Today I LearnedSummary DS &amp; Algo : Array / Big O Notation React : Redux-thunk DS &amp; Algo Array (2 pointers) - remove duplicate elements in sorted array Big O Notation : number of operations the computer has to do in terms of runtime &amp; space React React-thunk - needed for async call in the action React Lifecycle: render → componentDidMount : any other way than using ‘Loading’ ? https://programmingwithmosh.com/javascript/react-lifecycle-methods/","link":"/2019/10/28/TIL-191028/"},{"title":"TIL-191022","text":"Today I LearnedSummary Javascript : Map vs Object DS &amp; Algo : Array &amp; String React : Redux : redux-thunk JavaScript Map vs Object: Key field: in Object, it follows the rule of normal dictionary. The keys MUST be simple types — either integer or string or symbols. Nothing more. But in Map it can be any data type (an object, an array, etc…). Element order: in Map, original order of elements (pairs) is preserved, while in Object, it isn’t. Inheritance: Map is an instance of Object (surprise surprise!), but Object is definitely not an instance of Map. How to construct Object: direct literal | constructor | Object.prototype.create Map: only 1 way - built-in constructor new Map() DS &amp; Algo Reverse String Attempted in both Leetcode &amp; fCC. In fCC, confusion came as for loop required declaration of i (let i). In Leetcode, solved without using extra space by manipulating the sequence through temp. temp serve as buffer that element getting replaced is stored temporarily before getting placed at the back. It is required to avoid the mutation within the array in for loop. Intersection of two arrays II Used ‘Map’ to solve the problem. Question differed from version I in a sense that elements in result array were to include repeated ones. eg. Given [2,2] and [1,2,2,1], answer was [2,2]. At first attempted with mapified object, by creating key-value pair with key as number and value as frequency. And then, use another for loop to run through the other array - if object has number key and freq &gt; 0, insert into array and decrease frequency. Realised in javascript, there is Map data type which is subset of Object. It is easier in terms of syntax to find (boolean) and get (value) of the key-value pair as compared to Object. React Use of redux-thunk. Redux-thunk is required to process async function calls in the redux app. Since action can only store plain javascript object as payload, asynchronous function that gets callback later can not be included in the payload. Redux-thunk allows ?? Reference","link":"/2019/10/25/TIL-191022/"},{"title":"TIL-191029","text":"Today I LearnedSummary Data Structure &amp; Algorithm - Bit Manipulation React - Redux-Saga DS &amp; Algo Number of Bits | Leetcode Bit manipulation - n &amp; n-1 ⇒ n and 0 &amp; 1 = 0to remove 1s React redux-saga vs redux-thunk Similarity: Both allow asynchronous calls to be processed in redux. Difference: - thunk: Utilise callback functions - saga: can be started, paused &amp; cancelled from main application using ES6 Generator function &amp; much easier for testingReference","link":"/2019/10/29/TIL-191029/"},{"title":"TIL-191030","text":"Today I LearnedSummary React Project React mapStateToProps vs mapDispatchToProps mapStateToProps: It connects redux state to props of react component. mapDispatchToProps: It connects redux actions to react props. Project Puppeteer Puppeteer is a Node library which provides a high-level API to control headless Chrome or Chromium. It can be used to programmatically perform actions on chrome (ie. Scraping) elementHandle.click() vs page.evaluate(() =&gt; { document.getElementById('xx').click() })","link":"/2019/10/31/TIL-191030/"},{"title":"TIL-191107","text":"Today I LearnedSummary Data Structure &amp; Algorithm - Sliding Window Technique React - Functional vs Class components Data Structures &amp; AlgorithmsSliding Window This pattern involves creating a window which can either be an array or number from one position to another Depending on a certain condition, the window either increases or closes (and a new window is created) Very useful for keeping track of a subset of data in an array/string etc. Example Write a function called maxSubarraySum which accepts an array of integers and a number called n. The function should calculate the maximum sum of n consecutive elements in the array. 12maxSubarraySum([1,2,5,2,8,1,5],2) // 10maxSubarraySum([1,2,5,2,8,1,5],4) // 17 12345678910111213141516function maxSubarraySum(arr, num) { let maxSum = 0; let tempSum = 0; if (arr.length &lt; num) return null; for (let i = 0; i &lt; num; i++) { maxSum += arr[i]; } tempSum = maxSum; for (let i = num; i &lt; arr.length; i++) { //move along array tempSum = tempSum - arr[i - num] + arr[i]; //save max value maxSum = Math.max(maxSum, tempSum); } return maxSum;} React Functional vs Class Components in React Functional component easier to read &amp; test (less code) Use functional component for presentational component","link":"/2019/11/07/TIL-191107/"},{"title":"TIL-191112","text":"Today I LearnedSummary Javascript: Memory Model JavascriptJavaScript’s Memory Model Variable declarations and assignments for JS primitives What actually happens in memory when we declare &amp; assign value? 123let myNumber = 23;let newVar = myNumber;myNumber = myNumber + 1; The call stack is where primitives are stored (in addition to function calls). While the heap is where non-primitives are stored. The key difference is that the heap can store unordered data that can grow dynamically—perfect for arrays and objects. Variable declarations and assignments for JS non-primitives What actually happens in memory when we declare &amp; assign value? 1let myArray = []; Let vs Const The correct way to interpret “change” is a change in memory address. Let allows you to change memory addresses. Const does not allow you to change memory addresses. 12345678let sum = 0;sum = 1 + 2 + 3 + 4 + 5;let numbers = []; // WRONG! Use constnumbers.push(1);numbers.push(2);numbers.push(3);numbers.push(4);numbers.push(5); Google, who has some of the best coders in the world, says in their JavaScript style guide, “Declare all local variables with either const or let. Use const by default, unless a variable needs to be reassigned. The var keyword must not be used” Source: https://medium.com/@ethannam/javascripts-memory-model-7c972cd2c239","link":"/2019/11/13/TIL-191112/"},{"title":"TIL-191113","text":"Today I LearnedSummary Javascript: Callbacks, Promises &amp; Async Await There are different ways to execute asynchronous function Callbacks123456789101112131415function printString(string, callback) { setTimeout(() =&gt; { console.log(string) callback() }, Math.floor(Math.random() * 100) + 1)}function printAll() { printString(\"A\", () =&gt; { printString(\"B\", () =&gt; { printString(\"C\", () =&gt; {}) }) })}printAll() Callback Hell Nesting functions within functions within functions Hard to read the code. Promises123456789101112131415function printString(string) { return new Promise((resolve, reject) =&gt; { setTimeout(() =&gt; { console.log(string) resolve() }, Math.floor(Math.random() * 100) + 1) })}function printAll() { printString(\"A\") .then(() =&gt; printString(\"B\")) .then(() =&gt; printString(\"C\"))}printAll() The code is no longer nested but it still looks messy! Await123456async function printAll() { await printString(\"A\") await printString(\"B\") await printString(\"C\")}printAll() Await is basically syntactic sugar for Promises. It makes your asynchronous code look more like synchronous/procedural code, which is easier for humans to understand. Reference: https://medium.com/front-end-weekly/callbacks-promises-and-async-await-ad4756e01d90","link":"/2019/11/14/TIL-191113/"},{"title":"TIL-191117","text":"Today I LearnedSummary CSS: Flex vs Grid CSS - Flex vs Grid Grid is Container-Based, Flexbox is Content-Based Flexbox is One Dimensional, Grid is Two Dimensional Grid Has a “Gap” Property, Flexbox Doesn’t Flexbox Wraps vs Grid Wraps Flexbox covers more browser support vs Grid Source: https://www.webdesignerdepot.com/2018/09/grid-vs-flexbox-which-should-you-choose/ https://hackernoon.com/the-ultimate-css-battle-grid-vs-flexbox-d40da0449faf","link":"/2019/11/17/TIL-191117/"},{"title":"TIL-191118","text":"Today I LearnedSummary CSS : Making Menu button CSSHow to make 3 dotted menu button with drop down onclick HTML structure 12345678910111213141516171819&lt;body&gt; &lt;div class=\"header\"&gt; &lt;!-- three dot menu --&gt; &lt;div class=\"dropdown\"&gt; &lt;!-- three dots --&gt; &lt;ul class=\"dropbtn icons btn-right showLeft\" onclick=\"showDropdown()\"&gt; &lt;li&gt;&lt;/li&gt; &lt;li&gt;&lt;/li&gt; &lt;li&gt;&lt;/li&gt; &lt;/ul&gt; &lt;!-- menu --&gt; &lt;div id=\"myDropdown\" class=\"dropdown-content\"&gt; &lt;a href=\"#home\"&gt;Home&lt;/a&gt; &lt;a href=\"#about\"&gt;About&lt;/a&gt; &lt;a href=\"#contact\"&gt;Contact&lt;/a&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt;&lt;/body&gt; CSS Styling 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687* { margin: 0; padding: 0px;}.showLeft { background-color: #0d77b6 !important; border: 1px solid #0d77b6 !important; text-shadow: none !important; color: #fff !important; padding: 10px;}.icons li { background: none repeat scroll 0 0 #fff; height: 7px; width: 7px; line-height: 0; list-style: none outside none; margin-right: 15px; margin-top: 3px; vertical-align: top; border-radius: 50%; pointer-events: none;}//show on left side of the page.btn-left { left: 0.4em;}//show on right side of the page.btn-right { right: 0.4em;}.btn-left,.btn-right { position: absolute; top: 0.24em;}.dropbtn { background-color: #4caf50; position: fixed; color: white; font-size: 16px; border: none; cursor: pointer;}.dropbtn:hover,.dropbtn:focus { background-color: #3e8e41;}//Dropdown.dropdown { position: absolute; display: inline-block; right: 0.4em;}.dropdown-content { display: none; position: relative; margin-top: 60px; background-color: #f9f9f9; min-width: 160px; overflow: auto; box-shadow: 0px 8px 16px 0px rgba(0, 0, 0, 0.2); z-index: 1;}.dropdown-content a { color: black; padding: 12px 16px; text-decoration: none; display: block;}.dropdown a:hover { background-color: #f1f1f1;}.show { display: block;} Javascript 1234567891011121314151617function showDropdown() { document.getElementById(\"myDropdown\").classList.toggle(\"show\")}// Close the dropdown if the user clicks outside of itwindow.onclick = function(event) { if (!event.target.matches(\".dropbtn\")) { var dropdowns = document.getElementsByClassName(\"dropdown-content\") var i for (i = 0; i &lt; dropdowns.length; i++) { var openDropdown = dropdowns[i] if (openDropdown.classList.contains(\"show\")) { openDropdown.classList.remove(\"show\") } } }} Source: https://stackoverflow.com/questions/30260195/how-to-make-3-vertical-dots-using-css/30266001","link":"/2019/11/18/TIL-191118/"},{"title":"TIL-191120","text":"Today I LearnedSummary Data Structure &amp; Algorithm : Search React: React Redux Saga Structure Data Structure &amp; Algorithm : SearchJavaScript Search Methods indexOf includes find findIndex Types of Search (Array) Linear Search Big O of Linear Search: min O(1) max O(n) Binary Search Big O of Binary Serach: min O(1) max O(log n) Why O(log n)?: 16 elements take 4 steps, 32 elements take 5 steps. Reversal of power React: React Redux Saga Structure Above Flow Diagram helped me understand the react-redux-saga lifecycle. Source: https://medium.com/@ravindermahajan/why-use-redux-saga-f3413a3f7e34","link":"/2019/11/20/TIL-191120/"},{"title":"TIL-191119","text":"Today I LearnedSummary Data Structure &amp; Algorithm : Recursion Web Scraping: NodeJS + Puppeteer Data Structure &amp; Algorithm : Recursion Recusion: A process that calls itself Real-life use case: json.parse document.getElementById &amp; DOM traversal algorithms Object traversal How it works: Invoke the same function with a different input until reached with base case Required Components: Base Case: The condition when the recursion ends. (most important*) Different Input eg. 1234function sumRange(num) { if (num === 1) return 1 return num + sumRange(num - 1)} Helper method recursion 12345678function outer(input){ let outerScopedVariable = []; function helper(helperInput){ // modify the outerScopedVariable helper(helperInput--); } helper(input); return outerScopedVariable; Big O notation Time Complexity: number of recursive calls to make relative to input Space Complexity: max number of functions on the call stack at a given time Web Scraping (Puppeteer) : XpathXpath is nothing but XML path, the developer used XPath to validate XML files. HTML also follows the same structures as XML, so we can apply XPath to HTML pages as well along with Puppeteer. XPath should be given the last priority among locators because Xpath is slower compared with other locators. Use only if we are not able to find the element with id, name, linktext, css then only we should go for xpath. Xpath SyntaxXpath = tagName[@attribute = attribute's valueHTML code Syntax 1234&lt;tagName attribute1=\"attribute1_value\" attribute2=\"attribute2_value\" &gt;Text&lt;/tagName&gt;eg. &lt;a href=\"https:google.com\" class=\"idle\"&gt;Google&lt;/a&gt; Absolute XpathXpath = /tagName[@attribute = attribute's value/ - point to first node on the html document Relative XpathXpath = //tagName[@attribute = attribute's value// - point to any node in the webpage Use Case : Instagram Scraping 1234//HTML element;&lt;a href='/accounts/login/?source=auth_switcher'&gt;Log In&lt;/a&gt;//Using Puppeteer's inbuilt xpath selector to fetch above elementinstagram.page.$x('//a[contains(text(), \"Log in\")]')","link":"/2019/11/19/TIL-191119/"},{"title":"TIL-191121","text":"Today I LearnedSummary Data Structure &amp; Algorithm React Data Structures &amp; Algorithms Intro to sorting algorithm https://www.toptal.com/developers/sorting-algorithms React reselect redux-action request - putting authorization bearer","link":"/2019/11/21/TIL-191121/"},{"title":"TIL-191122","text":"Today I LearnedSummary Data Structure &amp; Algorithm: Bubble Sort JavaScript: Wth is ECMAScript? Data Structure &amp; Algorithm: Bubble SortSteps involved: Compare Swap ES5 vs ES2015 1234567/* ES5 */var temp = arr[j]arr[j] = arr[j + 1]arr[j + 1] = temp/* ES2015 */;[arr[j], arr[j + 1]] = [arr[j + 1], arr[j]] Optimization if already been swapped in inner loop, assign noSwap to false JavaScript: Wth is ECMAScript? Initial Editions of ECMAScript are named numerically, increasing by 1: ES1, ES2, ES3, ES4, ES5. New editions (starting with 2015) will be named ES followed by the year of release: ES2015, ES2016, ES2017 ECMAScript is a standard. JavaScript is the most popular implementation of that standard.","link":"/2019/11/22/TIL-191122/"},{"title":"TIL-191125","text":"Today I LearnedSummary Backend: Deploying puppeteer on Heroku JavaScript: let vs var Backend : Deploying puppeteer on Heroku https://medium.com/@joshblf/web-scraping-with-express-and-puppeteer-1c1b47bb2a21 Note: Hard to work for Instagram due to their 2 factor authentication JavaScript: let vs var https://stackoverflow.com/questions/762011/whats-the-difference-between-using-let-and-var","link":"/2019/11/25/TIL-191125/"},{"title":"TIL-191126","text":"Today I LearnedSummary Data Structure &amp; Algorithm : Selection Sort CSS : Responsive Web Data Structures &amp; Algorithms Selection Sort less swaps than bubble sort O(n) = N^2 runtime CSSResponsive web page creation bootstrap navbar &amp; collapse menu &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt; for responsive navbarNote: Require JQuery &amp; bootstrap js is required","link":"/2019/11/26/TIL-191126/"},{"title":"Merlabot","text":"Merlabot is a Singapore Travel bot for Korean tourists. It gives recommendations on what to eat in Singapore and answers frequently asked questions about Singapore. Built with 🏗️ Express.js (Node.js) PostgreSQL Dialogflow Features 👀 Answers Frequently Asked Questions about Singapore Select random restaurant from database base on user’s preferred cuisine","link":"/2019/12/10/merlabot/"},{"title":"Automating Instagram Likes","text":"Programme that automates Instagram likes for Instagram account growth. Built with 🏗️ Express.js (Node.js) Puppeteer Features 👀 Likes top 3 recent posts of hashtags provided Setup 🚀 clone, navigate to the root directory, and npm install Create config.js file with IG_ID &amp; IG_PW values Create tags.js file with IG hashtags in array Run program using npm start","link":"/2019/12/10/automating-instagram-likes/"},{"title":"ToDo List","text":"Simple todo-list built with 2 different frameworks - React vs Node.js React Version Built with 🏗️ Client React Redux Redux-thunk styled-components Server (Fake REST API) Express json-server Features 👀 Basic Create, Read, Update, Delete (CRUD) functionality Node.js Version Built with 🏗️ Express Version Express.js (Node.js) EJS Axios PostgreSQL Features 👀 Create, Read, Update, Delete (CRUD) functionality Authentication with Sign-up &amp; Login Todo List Saved in database","link":"/2019/12/09/todo-list/"},{"title":"TIL-191129","text":"Today I LearnedSummary Data Structure &amp; Algorithm : Merge Sort React: Testing with Jest &amp; Enzyme Data Structure &amp; Algorithm : Merge SortPseudocode Build helper function ‘merge’ that merges two arrays in sorted order by comparing values in each array mergeSort Pseudocode Break up the array into halves until you have arrays that are empty or have 1 element Merge smaller sorted arrays with other sorted arrays until full length Big O O(log n) decompositions O(n) comparisons per decomposition React : Testing with Jest &amp; Enzyme https://medium.com/codeclan/testing-react-with-jest-and-enzyme-20505fec4675","link":"/2019/11/30/TIL-191129/"}],"tags":[{"name":"Programming","slug":"Programming","link":"/tags/Programming/"},{"name":"React","slug":"React","link":"/tags/React/"},{"name":"leetcode","slug":"leetcode","link":"/tags/leetcode/"},{"name":"Axios","slug":"Axios","link":"/tags/Axios/"},{"name":"DOM Javascripts","slug":"DOM-Javascripts","link":"/tags/DOM-Javascripts/"},{"name":"axios","slug":"axios","link":"/tags/axios/"},{"name":"REST API","slug":"REST-API","link":"/tags/REST-API/"},{"name":"react","slug":"react","link":"/tags/react/"},{"name":"tree","slug":"tree","link":"/tags/tree/"},{"name":"stack","slug":"stack","link":"/tags/stack/"},{"name":"queue","slug":"queue","link":"/tags/queue/"},{"name":"javascript","slug":"javascript","link":"/tags/javascript/"},{"name":"node","slug":"node","link":"/tags/node/"},{"name":"hash table","slug":"hash-table","link":"/tags/hash-table/"},{"name":"asynchronous function","slug":"asynchronous-function","link":"/tags/asynchronous-function/"},{"name":"css","slug":"css","link":"/tags/css/"}],"categories":[{"name":"Learn Log","slug":"Learn-Log","link":"/categories/Learn-Log/"},{"name":"Essay","slug":"Essay","link":"/categories/Essay/"},{"name":"Data Structures & Algorithms","slug":"Data-Structures-Algorithms","link":"/categories/Data-Structures-Algorithms/"},{"name":"Tree","slug":"Data-Structures-Algorithms/Tree","link":"/categories/Data-Structures-Algorithms/Tree/"},{"name":"Projects","slug":"Projects","link":"/categories/Projects/"}]}